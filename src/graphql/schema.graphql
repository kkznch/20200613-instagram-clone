scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

scalar UnixTime @scalar(class: "App\\GraphQL\\Scalars\\UnixTime")

type Mutation {
    createPoem(
        image: Upload @rules(apply: ["required", "image"])
        text: String @rules(apply: ["required", "string"])
    ): Poem @middleware(checks: ["auth"])
    createUser(
        account_id: String @rules(apply: ["required", "unique:users,account_id"])
        password: String @bcrypt @rules(apply: ["required", "min:8"])
    ): LoginData!  @middleware(checks: ["guest"])
    likePoem(
        poem_id: ID @rules(apply: ["required", "exists:poems,id"])
    ): Boolean! @middleware(checks: ["auth"])
    login(
        account_id: String @rules(apply: ["required"])
        password: String @rules(apply: ["required"])
    ): LoginData! @middleware(checks: ["guest"])
}

type Query {
    me: User @auth
    poems: [Poem!]! @middleware(checks: ["auth"])
}

type Like {
    poem: Poem!
    user: User!
}

type LoginData {
    access_token: String
    token_type: String
    expires_in: Int
    error: String
}

type User {
    account_id: String!
    poems: [Poem!]!
}

type Poem {
    id: ID!
    image: String!
    text: String!
    user: User!
    likes: [Like!]!
    created_at: UnixTime!
}
